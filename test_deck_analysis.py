#!/usr/bin/env python3
"""
Script para testar o sistema de an√°lise de deck do inimigo
"""

import os
import json
from clashroyalebuildabot.ml.deck_analyzer import DeckAnalyzer
from clashroyalebuildabot.ml.enemy_detector import EnemyDetector

def main():
    print("=" * 60)
    print("    TESTE DO SISTEMA DE AN√ÅLISE DE DECK")
    print("=" * 60)
    print()
    
    print("üß† SISTEMA DE MEM√ìRIA IMPLEMENTADO:")
    print()
    print("‚úÖ An√°lise de deck do oponente")
    print("‚úÖ Detec√ß√£o autom√°tica de cartas")
    print("‚úÖ Previs√£o de cartas baseada no ciclo")
    print("‚úÖ Identifica√ß√£o de fraquezas")
    print("‚úÖ Sugest√£o de estrat√©gias")
    print("‚úÖ Mem√≥ria de jogos anteriores")
    print()
    
    print("üìä COMO FUNCIONA:")
    print()
    print("1. O bot detecta cartas jogadas pelo inimigo:")
    print("   ‚Ä¢ Identifica unidades no campo")
    print("   ‚Ä¢ Registra ordem das cartas")
    print("   ‚Ä¢ Analisa padr√µes de jogo")
    print()
    print("2. Analisa o deck do oponente:")
    print("   ‚Ä¢ Compara com decks conhecidos")
    print("   ‚Ä¢ Prediz cartas restantes")
    print("   ‚Ä¢ Calcula confian√ßa da predi√ß√£o")
    print()
    print("3. Identifica fraquezas e estrat√©gias:")
    print("   ‚Ä¢ Detecta falta de defesa a√©rea")
    print("   ‚Ä¢ Identifica poucos feiti√ßos")
    print("   ‚Ä¢ Sugere contra-jogadas")
    print()
    print("4. Previs√£o de ciclo:")
    print("   ‚Ä¢ Calcula intervalo entre cartas")
    print("   ‚Ä¢ Prediz pr√≥ximas cartas")
    print("   ‚Ä¢ Ajusta estrat√©gia automaticamente")
    print()
    
    print("üéØ BENEF√çCIOS:")
    print()
    print("‚Ä¢ Antecipa jogadas do oponente")
    print("‚Ä¢ Identifica fraquezas do deck inimigo")
    print("‚Ä¢ Sugere melhores contra-jogadas")
    print("‚Ä¢ Aprende padr√µes de jogo")
    print("‚Ä¢ Melhora com cada partida")
    print("‚Ä¢ Adapta estrat√©gia em tempo real")
    print()
    
    print("üìÅ ARQUIVOS CRIADOS:")
    print()
    print("‚Ä¢ deck_memory.json - Mem√≥ria de decks")
    print("‚Ä¢ clashroyalebuildabot/ml/deck_analyzer.py")
    print("‚Ä¢ clashroyalebuildabot/ml/enemy_detector.py")
    print()
    
    print("‚öôÔ∏è CONFIGURA√á√ÉO:")
    print()
    print("O sistema est√° ativado no config.yaml:")
    print("ml:")
    print("  enabled: True")
    print("  enable_deck_analysis: True")
    print("  deck_memory_path: deck_memory.json")
    print()
    
    print("üîß COMO USAR:")
    print()
    print("1. Execute: python main.py")
    print("2. Jogue normalmente")
    print("3. O bot detectar√° cartas do inimigo automaticamente")
    print("4. Ver√° logs como 'Enemy played: giant'")
    print("5. O bot ajustar√° estrat√©gia baseado na an√°lise")
    print()
    
    print("üìà MONITORAMENTO:")
    print()
    print("‚Ä¢ Logs mostrar√£o cartas detectadas")
    print("‚Ä¢ An√°lise de deck ser√° exibida")
    print("‚Ä¢ Estrat√©gias ser√£o sugeridas")
    print("‚Ä¢ Previs√µes de ciclo ser√£o feitas")
    print()
    
    # Testa se os m√≥dulos est√£o funcionando
    print("üß™ TESTE DOS M√ìDULOS:")
    print()
    
    try:
        # Testa o analisador de deck
        analyzer = DeckAnalyzer("test_deck_memory.json")
        print("‚úÖ DeckAnalyzer funcionando")
        
        # Simula um jogo
        analyzer.start_new_game()
        print("‚úÖ Iniciou an√°lise de jogo")
        
        # Simula cartas jogadas
        from clashroyalebuildabot.namespaces.state import State
        from clashroyalebuildabot.namespaces.numbers import Numbers
        
        # Cria estado simulado
        from clashroyalebuildabot.namespaces.numbers import NumberDetection
        
        # Cria n√∫meros simulados
        elixir = NumberDetection((0, 0, 0, 0), 10)
        left_ally_hp = NumberDetection((0, 0, 0, 0), 100)
        right_ally_hp = NumberDetection((0, 0, 0, 0), 100)
        left_enemy_hp = NumberDetection((0, 0, 0, 0), 100)
        right_enemy_hp = NumberDetection((0, 0, 0, 0), 100)
        
        numbers = Numbers(left_enemy_hp, right_enemy_hp, left_ally_hp, right_ally_hp, elixir)
        state = State([], [], numbers, [], False, None)
        
        # Simula cartas jogadas
        analyzer.record_enemy_card("giant", state)
        analyzer.record_enemy_card("musketeer", state)
        analyzer.record_enemy_card("witch", state)
        
        print("‚úÖ Registrou cartas do inimigo")
        
        # Obt√©m an√°lise
        analysis = analyzer.get_analysis_summary()
        if analysis:
            print(f"‚úÖ An√°lise: {analysis['cards_played']} cartas detectadas")
            if analysis['deck_prediction']:
                print(f"   Deck predito: {analysis['deck_prediction']['name']}")
                print(f"   Confian√ßa: {analysis['deck_prediction']['confidence']:.2f}")
            if analysis['weaknesses']:
                print(f"   Fraquezas: {analysis['weaknesses']}")
            if analysis['strategies']:
                print(f"   Estrat√©gias: {analysis['strategies']}")
        
        # Testa detector de inimigo
        detector = EnemyDetector(analyzer)
        print("‚úÖ EnemyDetector funcionando")
        
        # Finaliza jogo
        analyzer.end_game("win")
        print("‚úÖ Finalizou an√°lise do jogo")
        
        # Limpa arquivo de teste
        if os.path.exists("test_deck_memory.json"):
            os.remove("test_deck_memory.json")
        
        print("‚úÖ Todos os m√≥dulos funcionando corretamente!")
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        print("Verifique se todas as depend√™ncias est√£o instaladas")
    
    print()
    print("üéâ PR√ìXIMOS PASSOS:")
    print()
    print("1. Execute o bot: python main.py")
    print("2. Jogue algumas partidas")
    print("3. Observe os logs de detec√ß√£o de cartas")
    print("4. Veja como o bot adapta a estrat√©gia!")
    print()
    
    print("‚ö†Ô∏è IMPORTANTE:")
    print()
    print("‚Ä¢ O sistema precisa de algumas cartas para come√ßar a analisar")
    print("‚Ä¢ Quanto mais cartas detectadas, melhor a predi√ß√£o")
    print("‚Ä¢ A mem√≥ria melhora com cada partida")
    print("‚Ä¢ O bot se torna mais inteligente com o tempo")
    print()
    
    print("=" * 60)
    print("    O BOT AGORA √â UM ESTRATEGISTA! üß†")
    print("=" * 60)

if __name__ == "__main__":
    main()

"""
Sistema de Gera√ß√µes para Machine Learning
Gerencia diferentes vers√µes do modelo ML para aprendizado cont√≠nuo
"""
import os
import json
import time
import shutil
from typing import Dict, List, Optional, Tuple
from loguru import logger
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
import joblib


class GenerationManager:
    def __init__(self, base_path="ml_generations"):
        self.base_path = base_path
        self.generations_file = os.path.join(base_path, "generations.json")
        self.current_generation = 0
        self.generations_info = {}
        
        # Criar diret√≥rio se n√£o existir
        os.makedirs(base_path, exist_ok=True)
        
        # Carregar informa√ß√µes das gera√ß√µes existentes
        self._load_generations_info()
        
        # Configura√ß√µes de evolu√ß√£o
        self.evolution_config = {
            'min_games_for_evolution': 10,  # M√≠nimo de jogos para evoluir
            'min_win_rate_improvement': 0.05,  # Melhoria m√≠nima de 5% na taxa de vit√≥ria
            'max_generations_to_keep': 5,  # Manter apenas as √∫ltimas 5 gera√ß√µes
            'performance_threshold': 0.6,  # Taxa de vit√≥ria m√≠nima para considerar boa
            'evolution_patience': 3,  # Tentativas antes de for√ßar evolu√ß√£o
        }
    
    def _load_generations_info(self):
        """Carrega informa√ß√µes das gera√ß√µes existentes"""
        try:
            if os.path.exists(self.generations_file):
                with open(self.generations_file, 'r') as f:
                    data = json.load(f)
                    self.current_generation = data.get('current_generation', 0)
                    self.generations_info = data.get('generations', {})
                logger.info(f"Loaded {len(self.generations_info)} generations")
            else:
                self._save_generations_info()
        except Exception as e:
            logger.error(f"Error loading generations info: {e}")
            self.generations_info = {}
    
    def _save_generations_info(self):
        """Salva informa√ß√µes das gera√ß√µes"""
        try:
            data = {
                'current_generation': self.current_generation,
                'generations': self.generations_info,
                'last_updated': time.time()
            }
            with open(self.generations_file, 'w') as f:
                json.dump(data, f, indent=2)
            logger.info(f"üíæ Generations info saved to {self.generations_file}")
            logger.info(f"   ‚Ä¢ Current generation: {self.current_generation}")
            logger.info(f"   ‚Ä¢ Total generations: {len(self.generations_info)}")
        except Exception as e:
            logger.error(f"Error saving generations info: {e}")
    
    def create_new_generation(self, model, scaler, performance_metrics: Dict) -> int:
        """Cria uma nova gera√ß√£o do modelo"""
        try:
            # Incrementar n√∫mero da gera√ß√£o
            self.current_generation += 1
            generation_id = self.current_generation
            
            # Criar diret√≥rio da gera√ß√£o
            generation_path = os.path.join(self.base_path, f"generation_{generation_id}")
            os.makedirs(generation_path, exist_ok=True)
            
            # Salvar modelo e scaler
            model_path = os.path.join(generation_path, "model.pkl")
            model_data = {
                'model': model,
                'scaler': scaler,
                'trained': True,
                'generation_id': generation_id
            }
            joblib.dump(model_data, model_path)
            
            # Salvar m√©tricas de performance
            metrics_path = os.path.join(generation_path, "metrics.json")
            metrics_data = {
                'generation_id': generation_id,
                'created_at': time.time(),
                'performance': performance_metrics,
                'model_info': {
                    'type': 'RandomForestRegressor',
                    'n_estimators': model.n_estimators,
                    'max_depth': model.max_depth
                }
            }
            with open(metrics_path, 'w') as f:
                json.dump(metrics_data, f, indent=2)
            
            # Atualizar informa√ß√µes das gera√ß√µes
            self.generations_info[str(generation_id)] = {
                'path': generation_path,
                'created_at': time.time(),
                'performance': performance_metrics,
                'model_path': model_path,
                'metrics_path': metrics_path
            }
            
            # Limpar gera√ß√µes antigas
            self._cleanup_old_generations()
            
            # Salvar informa√ß√µes atualizadas
            self._save_generations_info()
            
            logger.info(f"üéØ Created new generation {generation_id}")
            logger.info(f"   ‚Ä¢ Performance: {performance_metrics}")
            logger.info(f"   ‚Ä¢ Model saved to: {model_path}")
            logger.info(f"   ‚Ä¢ Metrics saved to: {metrics_path}")
            return generation_id
            
        except Exception as e:
            logger.error(f"Error creating new generation: {e}")
            return 0
    
    def load_best_generation(self) -> Tuple[Optional[RandomForestRegressor], Optional[StandardScaler], Dict]:
        """Carrega a melhor gera√ß√£o baseada na performance"""
        try:
            if not self.generations_info:
                logger.info("No generations available")
                return None, None, {}
            
            # Encontrar a melhor gera√ß√£o baseada na taxa de vit√≥ria
            best_generation = None
            best_win_rate = -1
            
            for gen_id, gen_info in self.generations_info.items():
                performance = gen_info.get('performance', {})
                win_rate = performance.get('win_rate', 0)
                
                if win_rate > best_win_rate:
                    best_win_rate = win_rate
                    best_generation = gen_id
            
            if best_generation:
                model_path = self.generations_info[best_generation]['model_path']
                if os.path.exists(model_path):
                    data = joblib.load(model_path)
                    model = data['model']
                    scaler = data['scaler']
                    
                    logger.info(f"Loaded best generation {best_generation} with win rate: {best_win_rate:.2%}")
                    return model, scaler, self.generations_info[best_generation]
            
            logger.warning("No valid generation found")
            return None, None, {}
            
        except Exception as e:
            logger.error(f"Error loading best generation: {e}")
            return None, None, {}
    
    def should_evolve(self, current_performance: Dict, games_played: int) -> bool:
        """Decide se deve evoluir para uma nova gera√ß√£o"""
        try:
            # Verificar se tem jogos suficientes
            if games_played < self.evolution_config['min_games_for_evolution']:
                return False
            
            # Se n√£o h√° gera√ß√µes anteriores, evoluir
            if not self.generations_info:
                return True
            
            # Encontrar a melhor performance anterior
            best_previous_win_rate = 0
            for gen_info in self.generations_info.values():
                performance = gen_info.get('performance', {})
                win_rate = performance.get('win_rate', 0)
                best_previous_win_rate = max(best_previous_win_rate, win_rate)
            
            current_win_rate = current_performance.get('win_rate', 0)
            
            # Verificar se h√° melhoria significativa
            improvement = current_win_rate - best_previous_win_rate
            
            # Crit√©rios para evolu√ß√£o:
            # 1. Melhoria significativa na taxa de vit√≥ria
            if improvement >= self.evolution_config['min_win_rate_improvement']:
                logger.info(f"Evolution triggered: {improvement:.2%} improvement in win rate")
                return True
            
            # 2. Performance muito baixa (for√ßar evolu√ß√£o)
            if current_win_rate < 0.3:
                logger.info(f"Evolution triggered: Low performance ({current_win_rate:.2%})")
                return True
            
            # 3. Muitas tentativas sem evolu√ß√£o (for√ßar)
            if games_played > 50 and improvement < 0.01:
                logger.info("Evolution triggered: Too many games without improvement")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error in evolution decision: {e}")
            return False
    
    def get_generation_statistics(self) -> Dict:
        """Retorna estat√≠sticas de todas as gera√ß√µes"""
        try:
            stats = {
                'total_generations': len(self.generations_info),
                'current_generation': self.current_generation,
                'generations': {}
            }
            
            for gen_id, gen_info in self.generations_info.items():
                performance = gen_info.get('performance', {})
                stats['generations'][gen_id] = {
                    'win_rate': performance.get('win_rate', 0),
                    'games_played': performance.get('games_played', 0),
                    'created_at': gen_info.get('created_at', 0),
                    'avg_score': performance.get('avg_score', 0),
                    'best_score': performance.get('best_score', 0)
                }
            
            return stats
            
        except Exception as e:
            logger.error(f"Error getting generation statistics: {e}")
            return {}
    
    def _cleanup_old_generations(self):
        """Remove gera√ß√µes antigas para economizar espa√ßo"""
        try:
            if len(self.generations_info) <= self.evolution_config['max_generations_to_keep']:
                return
            
            # Ordenar gera√ß√µes por performance (pior primeiro)
            sorted_generations = sorted(
                self.generations_info.items(),
                key=lambda x: x[1].get('performance', {}).get('win_rate', 0)
            )
            
            # Remover as piores gera√ß√µes
            generations_to_remove = len(sorted_generations) - self.evolution_config['max_generations_to_keep']
            
            for i in range(generations_to_remove):
                gen_id, gen_info = sorted_generations[i]
                generation_path = gen_info['path']
                
                # Remover diret√≥rio da gera√ß√£o
                if os.path.exists(generation_path):
                    shutil.rmtree(generation_path)
                
                # Remover da lista
                del self.generations_info[gen_id]
                
                logger.info(f"Removed old generation {gen_id}")
                
        except Exception as e:
            logger.error(f"Error cleaning up old generations: {e}")
    
    def get_evolution_recommendations(self, current_performance: Dict) -> List[str]:
        """Retorna recomenda√ß√µes para evolu√ß√£o"""
        recommendations = []
        
        try:
            current_win_rate = current_performance.get('win_rate', 0)
            games_played = current_performance.get('games_played', 0)
            
            if games_played < self.evolution_config['min_games_for_evolution']:
                recommendations.append(f"Play more games ({games_played}/{self.evolution_config['min_games_for_evolution']})")
            
            if current_win_rate < 0.4:
                recommendations.append("Performance muito baixa - considere ajustar estrat√©gias")
            
            if current_win_rate > 0.7:
                recommendations.append("Performance excelente - mantenha a estrat√©gia atual")
            
            # Comparar com gera√ß√µes anteriores
            if self.generations_info:
                best_previous = max(
                    gen_info.get('performance', {}).get('win_rate', 0)
                    for gen_info in self.generations_info.values()
                )
                
                if current_win_rate > best_previous:
                    recommendations.append(f"Melhoria de {(current_win_rate - best_previous):.2%} sobre a melhor gera√ß√£o")
                elif current_win_rate < best_previous:
                    recommendations.append(f"Regress√£o de {(best_previous - current_win_rate):.2%} em rela√ß√£o √† melhor gera√ß√£o")
            
            return recommendations
            
        except Exception as e:
            logger.error(f"Error getting evolution recommendations: {e}")
            return ["Erro ao analisar recomenda√ß√µes"]
    
    def export_generation_report(self, output_path: str = "generation_report.json"):
        """Exporta relat√≥rio completo das gera√ß√µes"""
        try:
            report = {
                'exported_at': time.time(),
                'total_generations': len(self.generations_info),
                'current_generation': self.current_generation,
                'evolution_config': self.evolution_config,
                'generations': self.generations_info,
                'statistics': self.get_generation_statistics()
            }
            
            with open(output_path, 'w') as f:
                json.dump(report, f, indent=2)
            
            logger.info(f"Generation report exported to {output_path}")
            
        except Exception as e:
            logger.error(f"Error exporting generation report: {e}")
